API HTTP  de la genda de contactos

Recursos:
	Contacto
		URI: /contactos/{id}
		Operaciones:
			Modificiacion: PUT
			Eliminacion: DELETE
	Coleccion de contactos
		URI: /contactos
		Operaciones: 
			Alta: POST
			Búsqueda: GET
				Parámetro de query opcional: "nombre" , que hará
				que solamente se devulvan contactos que contengan en el
				nombre el valor de ese parámetro.


Falta escribir que se representa de json, códigos de error...


CODE:
app.js

const expres = require("expres")
const app = express();
const db = require("./db.js");

const HTTP_OK = 200;
const HTTP_CREATED = 201;
const HTTP_NO_CONTENT = 204;
const HTTP_BAD_REQUEST = 400;
const HTTP_NOT_FOUND = 404;
const HTTP_INTERNAR_SERVER_ERROR = 500;

const PORT = process.env.PORT || 50000;

// A parte mirar lo del fichero env

app.use(express.json); //Esto es el middleware
app.use(express.static("public"));

// MODIFICACIÓN DE UN CONTACTO INDIVIDUAL
app.put("/contactos/:id", (req, res) => {
try{
	const modificado = db.modificarContacto(req.params.id,req.body);
	if (modificado) res.status(HTTP_OK).send(modificado);
	else
		res.status(HTTP_NOT_FOUND).send('no existe el contacto con id:${req.params.id}');
} catch (err) {
Habría que distinguir si el error es porque los datos no son correctos ( y enviar un bad_request) o si es por motivo
del servidor ( enviar server internal error)
res.status...

});

// BORRADO DE UN CONTACTO INDIVIDUAL
app.delete("/contactos/:id", (req, res) => {
try{
	const borrado= db.borrarContacto(req.params.id,req.body);
	if (borrado) res.status(HTTP_OK).send(borrado);
	else
		res.status(HTTP_NOT_FOUND).send('no existe el contacto con id:${req.params.id}');
} catch (err) {
Habría que distinguir si el error es porque los datos no son correctos ( y enviar un bad_request) o si es por motivo
del servidor ( enviar server internal error)
res.status...

});

// ALTA
app.delete("/contactos", (req, res) => {
try{
	const nuevo = db.borrarContacto(req.body);
	if (nuevo) res.status(HTTP_CREATED).location('/contactos/${nuevo.id}').send("Contacto creado");
	else
		res.status(HTTP_BAD_REQUEST).send('Datos incorrectos');
} catch (err) {

INTERNAL SERVER ERROR

});

// BÚSQUEDA

app.get("/contactos", (req, res) => {
	const filtro = req.query.nombre;
	if (filtro) {
		res.send(db.buscarContactos(filtro));
	} else {
		res.send(db.listarContactos());	
	}
});

// Manejador de errores
app.use((err, req, res, next) => {
	console.error('Ha pasado algo: ${err}');
	res.sendStatus(HTTP_INTERNAL_SERVER_ERROR);
});

app.listen(PORT, () => console.log('Servidor escuchando en el puerto ${PORT}');




"" pug -c -D -n crearContactos -o pubic noombreArchivo


pug:
//por defecto pone div
	each contaco in contactos
		.clase1.clase2#id1 // aquí habría que añadir un atributo propio indicando el id del contacto
				   // atributo propio = (data-id-contacto=contacto.id)
			p.monoMataRatas #{contacto.nombre}


		<div class="clase1 clase2" id="id1">
			<p class="monoMataRatas">Pepe</p>
		</div>

let output;


document.addEventListener("DOMContentLoaded", function() {
	output = document.querySelector("output");
	document.getElementBy("filtro").addEventListener("keyup", buscar);
	output.addEventListener("click", outputClicado);
	cargarContactos();
});

async function outputClicado(evt) {
	if (evt.target.classList.contains("btn-close")) {
		const item = evt.target.closest(".list-group-item");
		const id = item.dataset.idContacto;
		const resp = await fetch('/contactos/${id}', {method: "DELETE"});
		if (resp.ok) cargarContactos(inputFiltro.value);
		else alert("tonto");
	}
}

async function alta() {
	const nuevo = {};
	const resp = await fetch("/contactos", {
		method: "POST",
		body; JSON.stringify(nuevo),
		header:{
			"Content-type": "application/json"
		}
	});
}

function buscar(evt) {
	const filtro = evt.target.value;
	cargarContactos(filtro);
}

async function cargarContactos(filtro = undefined) {
	// 1. Lanzar un get a /contactos
	let resp;
	// controlar en la db lo de mayuscula y minúscula
	if (filtro) {
		resp = await fetch('/contactos?nombre=${filtro}');
	} else {
		resp = await fetch("/contactos");
	}
	
	// 2 si tiene éxito
	if (resp.ok) {
	// 3. Extraer el Json que venga
		const datosContactos = await resp.json();
	// 4. pasarlo a la función de pug
		crearContactos({contactos: datosContactos});
	// 5. meter en el output el html que nos genere el pug
		output.innerHTML 
	} else {
		alert("Tontooo");
	}
}


















section para el form
output para el div main